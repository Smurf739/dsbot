from disnake.ext import commands
import disnake
import config
from database import VoiceDb
from utils.helper import is_leader, in_voice
from utils.functions import get_time_now


class VoiceButtons(disnake.ui.View):
    def __init__(self):
        self.voice_db = VoiceDb()
        super().__init__(timeout=None)

    @disnake.ui.button(style=disnake.ButtonStyle.secondary,
                       emoji="üìè", custom_id="people")
    @in_voice
    @is_leader
    async def room1_settings(self, message,
                             interaction: disnake.MessageInteraction):
        await interaction.response.send_modal(
            ModalHandler(interaction.user.voice.channel,
                         interaction.user.voice.channel.id, "limit"))



class ModalHandler(disnake.ui.Modal):
    def __init__(self, channel, channel_id, arg):
        self.channel = channel
        self.channel_id = channel_id
        self.voicedb = VoiceDb()
        self.arg = arg
        if self.arg == "limit":
            label = "–£–∫–∞–∂–∏ –ª–∏–º–∏—Ç."
            custom_id = "limit"
            placeholder = "–£–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ç 0 –¥–æ 99"
            title = "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–æ–π—Å–∞"
        components = [
            disnake.ui.TextInput(label=label, placeholder=placeholder, custom_id=custom_id)
        ]
        super().__init__(title=title, custom_id=custom_id, components=components)

    async def callback(self, interaction: disnake.MessageInteraction) -> None:
        if interaction.text_values is None:
            interaction.response.defer()
        else:
            if self.arg == "limit":
                res = interaction.text_values["limit"]
                if int(res) > 99:
                    res = "99"
                elif int(res) < 0:
                    res = "0"
                await self.channel.edit(user_limit=res)
                await self.voicedb.set_limit(res, self.channel_id)

                await interaction.response.send_message(embed=disnake.Embed(
                    title=f"üì¶ –ö–æ–º–Ω–∞—Ç–∞: {interaction.user.voice.channel.mention}",
                    description="**–¢—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª —Å–≤–æ—é –∫–æ–º–Ω–∞—Ç—É!**",
                    color=0x2f3136
                ).add_field(name="", value=f"> {interaction.author.mention}, –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - **{res}**").set_footer(
                    text=f"–°–µ–≥–æ–¥–Ω—è, –≤ {get_time_now()}").set_thumbnail(interaction.author.avatar),
                    ephemeral=True)



async def text_func(category=None, settings_room=None):
    if settings_room is None:
        settings_room = await category.create_text_channel(
            name="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ "
                 "–∫–æ–º–Ω–∞—Ç—ã")
        config.voice_settings_channel = settings_room.id
    else:
        a = [message async for message in settings_room.history()]
        await settings_room.purge(limit=len(a))
    embed = disnake.Embed(
        title="üì¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–Ω–∞—Ç—ã",
        description="–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ—é —Ä—É–º—É",
        color=0x313338)

    embed.add_field(name="",
                    value="üìè ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç\n"
                          "üîê ‚Äî –∑–∞–∫—Ä—ã—Ç—å/–æ—Ç–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É\n"
                          "üõ°Ô∏è ‚Äî –∑–∞–±—Ä–∞—Ç—å/–≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä—É–º–µ\n"
                          "üëë ‚Äî –ø–µ—Ä–µ–¥–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞\n"
                          "üîä ‚Äî –∑–∞–±—Ä–∞—Ç—å/–≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–æ –≥–æ–≤–æ—Ä–∏—Ç—å")
    embed.add_field(name="",
                    value="‚úèÔ∏è ‚Äî —Å–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
                          "üëäüèº ‚Äî –≤—ã–≥–Ω–∞—Ç—å –∏–∑ –∫–æ–º–Ω–∞—Ç—ã\n"
                          "üïµüèª ‚Äî —Å–∫—Ä—ã—Ç—å/–æ—Ç–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É\n"
                          "üßπ ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                          "‚ÑπÔ∏è ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–Ω–∞—Ç–µ")
    embed.set_footer(
        text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ")

    await settings_room.send(embed=embed, view=VoiceButtons())


async def create(this_guild):
    category = await this_guild.create_category(
        name="–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã")
    config.category_voice_create = category.id

    settings_room = await category.create_text_channel(
        name="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ "
             "–∫–æ–º–Ω–∞—Ç—ã")

    voice_room = await category.create_voice_channel(
        name="–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É")
    config.voice_settings_channel = settings_room.id
    config.voice_create_channel = voice_room.id

    embed = disnake.Embed(
        title="üì¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–Ω–∞—Ç—ã",
        description="–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ—é —Ä—É–º—É",
        color=0x313338)

    embed.add_field(name="",
                    value="üìè ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç\n"
                          "üîê ‚Äî –∑–∞–∫—Ä—ã—Ç—å/–æ—Ç–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É\n"
                          "üõ°Ô∏è ‚Äî –∑–∞–±—Ä–∞—Ç—å/–≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä—É–º–µ\n"
                          "üëë ‚Äî –ø–µ—Ä–µ–¥–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞\n"
                          "üîä ‚Äî –∑–∞–±—Ä–∞—Ç—å/–≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–æ –≥–æ–≤–æ—Ä–∏—Ç—å")
    embed.add_field(name="",
                    value="‚úèÔ∏è ‚Äî —Å–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
                          "üëäüèº ‚Äî –≤—ã–≥–Ω–∞—Ç—å –∏–∑ –∫–æ–º–Ω–∞—Ç—ã\n"
                          "üïµüèª ‚Äî —Å–∫—Ä—ã—Ç—å/–æ—Ç–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É\n"
                          "üßπ ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                          "‚ÑπÔ∏è ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–Ω–∞—Ç–µ")
    embed.set_footer(
        text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ")

    await settings_room.send(embed=embed, view=VoiceButtons())


class load():
    def __init__(self, bot):
        self.bot = bot

    async def create_channels(self, this_guild):
        is_voice = False
        is_text = False
        is_category = False
        category = None
        for i in this_guild.categories:
            if i.name == "–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã" or i.name == "Private rooms":
                category = i
                print(i, category)
                is_category = True
                config.category_voice_create = i.id
                for j in i.channels:
                    if j.name.lower() == "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞-–∫–æ–º–Ω–∞—Ç—ã":
                        config.voice_settings_channel = j.id
                        is_text = True
                        await text_func(i, j)


                    elif j.name.lower() == "—Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É":
                        config.voice_create_channel = j.id
                        is_voice = True

                break

        if is_text is False and is_voice is False and is_category is False:
            await create(this_guild)
        elif is_voice is False:
            voice_room = await category.create_voice_channel(
                name="–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É")
            config.voice_create_channel = voice_room.id
        elif is_text is False:
            await text_func(category)
